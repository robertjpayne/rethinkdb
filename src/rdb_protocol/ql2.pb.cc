// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rdb_protocol/ql2.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rdb_protocol/ql2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class VersionDummyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VersionDummy> {
} _VersionDummy_default_instance_;
class Query_AssocPairDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Query_AssocPair> {
} _Query_AssocPair_default_instance_;
class QueryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Query> {
} _Query_default_instance_;
class FrameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Frame> {
} _Frame_default_instance_;
class BacktraceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Backtrace> {
} _Backtrace_default_instance_;
class ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Response> {
} _Response_default_instance_;
class Datum_AssocPairDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Datum_AssocPair> {
} _Datum_AssocPair_default_instance_;
class DatumDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Datum> {
} _Datum_default_instance_;
class Term_AssocPairDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Term_AssocPair> {
} _Term_AssocPair_default_instance_;
class TermDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Term> {
} _Term_default_instance_;

namespace protobuf_rdb_5fprotocol_2fql2_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[9];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionDummy, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionDummy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_AssocPair, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_AssocPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_AssocPair, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query_AssocPair, val_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, obsolete_noreply_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, accepts_r_json_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, global_optargs_),
  4,
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, opt_),
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Backtrace, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Backtrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Backtrace, frames_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, error_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, notes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, backtrace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, profile_),
  3,
  4,
  ~0u,
  2,
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum_AssocPair, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum_AssocPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum_AssocPair, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum_AssocPair, val_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, r_bool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, r_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, r_str_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, r_array_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, r_object_),
  3,
  2,
  1,
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Term_AssocPair, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Term_AssocPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Term_AssocPair, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Term_AssocPair, val_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Term, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Term, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Term, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Term, datum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Term, args_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Term, optargs_),
  1,
  0,
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 5, sizeof(VersionDummy)},
  { 5, 12, sizeof(Query_AssocPair)},
  { 14, 25, sizeof(Query)},
  { 31, 39, sizeof(Frame)},
  { 42, 48, sizeof(Backtrace)},
  { 49, 61, sizeof(Response)},
  { 68, 75, sizeof(Datum_AssocPair)},
  { 77, 88, sizeof(Datum)},
  { 94, 101, sizeof(Term_AssocPair)},
  { 103, 112, sizeof(Term)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_VersionDummy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Query_AssocPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Frame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Backtrace_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Datum_AssocPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Datum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Term_AssocPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Term_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "rdb_protocol/ql2.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace

void TableStruct::Shutdown() {
  _VersionDummy_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Query_AssocPair_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Query_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Frame_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Backtrace_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Response_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Datum_AssocPair_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Datum_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _Term_AssocPair_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _Term_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _VersionDummy_default_instance_.DefaultConstruct();
  _Query_AssocPair_default_instance_.DefaultConstruct();
  _Query_default_instance_.DefaultConstruct();
  _Frame_default_instance_.DefaultConstruct();
  _Backtrace_default_instance_.DefaultConstruct();
  _Response_default_instance_.DefaultConstruct();
  _Datum_AssocPair_default_instance_.DefaultConstruct();
  _Datum_default_instance_.DefaultConstruct();
  _Term_AssocPair_default_instance_.DefaultConstruct();
  _Term_default_instance_.DefaultConstruct();
  _Query_AssocPair_default_instance_.get_mutable()->val_ = const_cast< ::Term*>(
      ::Term::internal_default_instance());
  _Query_default_instance_.get_mutable()->query_ = const_cast< ::Term*>(
      ::Term::internal_default_instance());
  _Response_default_instance_.get_mutable()->backtrace_ = const_cast< ::Backtrace*>(
      ::Backtrace::internal_default_instance());
  _Response_default_instance_.get_mutable()->profile_ = const_cast< ::Datum*>(
      ::Datum::internal_default_instance());
  _Datum_AssocPair_default_instance_.get_mutable()->val_ = const_cast< ::Datum*>(
      ::Datum::internal_default_instance());
  _Term_AssocPair_default_instance_.get_mutable()->val_ = const_cast< ::Term*>(
      ::Term::internal_default_instance());
  _Term_default_instance_.get_mutable()->datum_ = const_cast< ::Datum*>(
      ::Datum::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\026rdb_protocol/ql2.proto\"\213\001\n\014VersionDumm"
      "y\"O\n\007Version\022\014\n\004V0_1\020\266\364\206\373\003\022\014\n\004V0_2\020\341\203\302\221\007"
      "\022\014\n\004V0_3\020\276\320\327\373\005\022\014\n\004V0_4\020\240\332\260\200\004\022\014\n\004V1_0\020\303\373\212"
      "\246\003\"*\n\010Protocol\022\020\n\010PROTOBUF\020\301\370\377\270\002\022\014\n\004JSON"
      "\020\307\341\245\363\007\"\267\002\n\005Query\022\036\n\004type\030\001 \001(\0162\020.Query.Q"
      "ueryType\022\024\n\005query\030\002 \001(\0132\005.Term\022\r\n\005token\030"
      "\003 \001(\003\022\037\n\020OBSOLETE_noreply\030\004 \001(\010:\005false\022\035"
      "\n\016accepts_r_json\030\005 \001(\010:\005false\022(\n\016global_"
      "optargs\030\006 \003(\0132\020.Query.AssocPair\032,\n\tAssoc"
      "Pair\022\013\n\003key\030\001 \001(\t\022\022\n\003val\030\002 \001(\0132\005.Term\"Q\n"
      "\tQueryType\022\t\n\005START\020\001\022\014\n\010CONTINUE\020\002\022\010\n\004S"
      "TOP\020\003\022\020\n\014NOREPLY_WAIT\020\004\022\017\n\013SERVER_INFO\020\005"
      "\"`\n\005Frame\022\036\n\004type\030\001 \001(\0162\020.Frame.FrameTyp"
      "e\022\013\n\003pos\030\002 \001(\003\022\013\n\003opt\030\003 \001(\t\"\035\n\tFrameType"
      "\022\007\n\003POS\020\001\022\007\n\003OPT\020\002\"#\n\tBacktrace\022\026\n\006frame"
      "s\030\001 \003(\0132\006.Frame\"\254\005\n\010Response\022$\n\004type\030\001 \001"
      "(\0162\026.Response.ResponseType\022\'\n\nerror_type"
      "\030\007 \001(\0162\023.Response.ErrorType\022%\n\005notes\030\006 \003"
      "(\0162\026.Response.ResponseNote\022\r\n\005token\030\002 \001("
      "\003\022\030\n\010response\030\003 \003(\0132\006.Datum\022\035\n\tbacktrace"
      "\030\004 \001(\0132\n.Backtrace\022\027\n\007profile\030\005 \001(\0132\006.Da"
      "tum\"\247\001\n\014ResponseType\022\020\n\014SUCCESS_ATOM\020\001\022\024"
      "\n\020SUCCESS_SEQUENCE\020\002\022\023\n\017SUCCESS_PARTIAL\020"
      "\003\022\021\n\rWAIT_COMPLETE\020\004\022\017\n\013SERVER_INFO\020\005\022\020\n"
      "\014CLIENT_ERROR\020\020\022\021\n\rCOMPILE_ERROR\020\021\022\021\n\rRU"
      "NTIME_ERROR\020\022\"\254\001\n\tErrorType\022\016\n\010INTERNAL\020"
      "\300\204=\022\024\n\016RESOURCE_LIMIT\020\200\211z\022\022\n\013QUERY_LOGIC"
      "\020\300\215\267\001\022\024\n\rNON_EXISTENCE\020\340\232\275\001\022\020\n\tOP_FAILED"
      "\020\240\237\372\001\022\027\n\020OP_INDETERMINATE\020\300\254\200\002\022\013\n\004USER\020\300"
      "\226\261\002\022\027\n\020PERMISSION_ERROR\020\200\233\356\002\"p\n\014Response"
      "Note\022\021\n\rSEQUENCE_FEED\020\001\022\r\n\tATOM_FEED\020\002\022\027"
      "\n\023ORDER_BY_LIMIT_FEED\020\003\022\020\n\014UNIONED_FEED\020"
      "\004\022\023\n\017INCLUDES_STATES\020\005\"\243\002\n\005Datum\022\036\n\004type"
      "\030\001 \001(\0162\020.Datum.DatumType\022\016\n\006r_bool\030\002 \001(\010"
      "\022\r\n\005r_num\030\003 \001(\001\022\r\n\005r_str\030\004 \001(\t\022\027\n\007r_arra"
      "y\030\005 \003(\0132\006.Datum\022\"\n\010r_object\030\006 \003(\0132\020.Datu"
      "m.AssocPair\032-\n\tAssocPair\022\013\n\003key\030\001 \001(\t\022\023\n"
      "\003val\030\002 \001(\0132\006.Datum\"`\n\tDatumType\022\n\n\006R_NUL"
      "L\020\001\022\n\n\006R_BOOL\020\002\022\t\n\005R_NUM\020\003\022\t\n\005R_STR\020\004\022\013\n"
      "\007R_ARRAY\020\005\022\014\n\010R_OBJECT\020\006\022\n\n\006R_JSON\020\007\"\322\023\n"
      "\004Term\022\034\n\004type\030\001 \001(\0162\016.Term.TermType\022\025\n\005d"
      "atum\030\002 \001(\0132\006.Datum\022\023\n\004args\030\003 \003(\0132\005.Term\022"
      " \n\007optargs\030\004 \003(\0132\017.Term.AssocPair\032,\n\tAss"
      "ocPair\022\013\n\003key\030\001 \001(\t\022\022\n\003val\030\002 \001(\0132\005.Term\""
      "\257\022\n\010TermType\022\t\n\005DATUM\020\001\022\016\n\nMAKE_ARRAY\020\002\022"
      "\014\n\010MAKE_OBJ\020\003\022\007\n\003VAR\020\n\022\t\n\004UUID\020\251\001\022\t\n\005ERR"
      "OR\020\014\022\020\n\014IMPLICIT_VAR\020\r\022\006\n\002DB\020\016\022\t\n\005TABLE\020"
      "\017\022\007\n\003GET\020\020\022\013\n\007GET_ALL\020N\022\006\n\002EQ\020\021\022\006\n\002NE\020\022\022"
      "\006\n\002LT\020\023\022\006\n\002LE\020\024\022\006\n\002GT\020\025\022\006\n\002GE\020\026\022\007\n\003NOT\020\027"
      "\022\007\n\003ADD\020\030\022\007\n\003SUB\020\031\022\007\n\003MUL\020\032\022\007\n\003DIV\020\033\022\007\n\003"
      "MOD\020\034\022\n\n\005FLOOR\020\267\001\022\t\n\004CEIL\020\270\001\022\n\n\005ROUND\020\271\001"
      "\022\n\n\006APPEND\020\035\022\013\n\007PREPEND\020P\022\016\n\nDIFFERENCE\020"
      "_\022\016\n\nSET_INSERT\020X\022\024\n\020SET_INTERSECTION\020Y\022"
      "\r\n\tSET_UNION\020Z\022\022\n\016SET_DIFFERENCE\020[\022\t\n\005SL"
      "ICE\020\036\022\010\n\004SKIP\020F\022\t\n\005LIMIT\020G\022\016\n\nOFFSETS_OF"
      "\020W\022\014\n\010CONTAINS\020]\022\r\n\tGET_FIELD\020\037\022\010\n\004KEYS\020"
      "^\022\013\n\006VALUES\020\272\001\022\013\n\006OBJECT\020\217\001\022\016\n\nHAS_FIELD"
      "S\020 \022\017\n\013WITH_FIELDS\020`\022\t\n\005PLUCK\020!\022\013\n\007WITHO"
      "UT\020\"\022\t\n\005MERGE\020#\022\026\n\022BETWEEN_DEPRECATED\020$\022"
      "\014\n\007BETWEEN\020\266\001\022\n\n\006REDUCE\020%\022\007\n\003MAP\020&\022\t\n\004FO"
      "LD\020\273\001\022\n\n\006FILTER\020\'\022\016\n\nCONCAT_MAP\020(\022\014\n\010ORD"
      "ER_BY\020)\022\014\n\010DISTINCT\020*\022\t\n\005COUNT\020+\022\014\n\010IS_E"
      "MPTY\020V\022\t\n\005UNION\020,\022\007\n\003NTH\020-\022\014\n\007BRACKET\020\252\001"
      "\022\016\n\nINNER_JOIN\0200\022\016\n\nOUTER_JOIN\0201\022\013\n\007EQ_J"
      "OIN\0202\022\007\n\003ZIP\020H\022\n\n\005RANGE\020\255\001\022\r\n\tINSERT_AT\020"
      "R\022\r\n\tDELETE_AT\020S\022\r\n\tCHANGE_AT\020T\022\r\n\tSPLIC"
      "E_AT\020U\022\r\n\tCOERCE_TO\0203\022\013\n\007TYPE_OF\0204\022\n\n\006UP"
      "DATE\0205\022\n\n\006DELETE\0206\022\013\n\007REPLACE\0207\022\n\n\006INSER"
      "T\0208\022\r\n\tDB_CREATE\0209\022\013\n\007DB_DROP\020:\022\013\n\007DB_LI"
      "ST\020;\022\020\n\014TABLE_CREATE\020<\022\016\n\nTABLE_DROP\020=\022\016"
      "\n\nTABLE_LIST\020>\022\013\n\006CONFIG\020\256\001\022\013\n\006STATUS\020\257\001"
      "\022\t\n\004WAIT\020\261\001\022\020\n\013RECONFIGURE\020\260\001\022\016\n\tREBALAN"
      "CE\020\263\001\022\t\n\004SYNC\020\212\001\022\n\n\005GRANT\020\274\001\022\020\n\014INDEX_CR"
      "EATE\020K\022\016\n\nINDEX_DROP\020L\022\016\n\nINDEX_LIST\020M\022\021"
      "\n\014INDEX_STATUS\020\213\001\022\017\n\nINDEX_WAIT\020\214\001\022\021\n\014IN"
      "DEX_RENAME\020\234\001\022\023\n\016SET_WRITE_HOOK\020\275\001\022\023\n\016GE"
      "T_WRITE_HOOK\020\276\001\022\013\n\007FUNCALL\020@\022\n\n\006BRANCH\020A"
      "\022\006\n\002OR\020B\022\007\n\003AND\020C\022\014\n\010FOR_EACH\020D\022\010\n\004FUNC\020"
      "E\022\007\n\003ASC\020I\022\010\n\004DESC\020J\022\010\n\004INFO\020O\022\t\n\005MATCH\020"
      "a\022\013\n\006UPCASE\020\215\001\022\r\n\010DOWNCASE\020\216\001\022\n\n\006SAMPLE\020"
      "Q\022\013\n\007DEFAULT\020\\\022\010\n\004JSON\020b\022\023\n\016TO_JSON_STRI"
      "NG\020\254\001\022\013\n\007ISO8601\020c\022\016\n\nTO_ISO8601\020d\022\016\n\nEP"
      "OCH_TIME\020e\022\021\n\rTO_EPOCH_TIME\020f\022\007\n\003NOW\020g\022\017"
      "\n\013IN_TIMEZONE\020h\022\n\n\006DURING\020i\022\010\n\004DATE\020j\022\017\n"
      "\013TIME_OF_DAY\020~\022\014\n\010TIMEZONE\020\177\022\t\n\004YEAR\020\200\001\022"
      "\n\n\005MONTH\020\201\001\022\010\n\003DAY\020\202\001\022\020\n\013DAY_OF_WEEK\020\203\001\022"
      "\020\n\013DAY_OF_YEAR\020\204\001\022\n\n\005HOURS\020\205\001\022\014\n\007MINUTES"
      "\020\206\001\022\014\n\007SECONDS\020\207\001\022\t\n\004TIME\020\210\001\022\n\n\006MONDAY\020k"
      "\022\013\n\007TUESDAY\020l\022\r\n\tWEDNESDAY\020m\022\014\n\010THURSDAY"
      "\020n\022\n\n\006FRIDAY\020o\022\014\n\010SATURDAY\020p\022\n\n\006SUNDAY\020q"
      "\022\013\n\007JANUARY\020r\022\014\n\010FEBRUARY\020s\022\t\n\005MARCH\020t\022\t"
      "\n\005APRIL\020u\022\007\n\003MAY\020v\022\010\n\004JUNE\020w\022\010\n\004JULY\020x\022\n"
      "\n\006AUGUST\020y\022\r\n\tSEPTEMBER\020z\022\013\n\007OCTOBER\020{\022\014"
      "\n\010NOVEMBER\020|\022\014\n\010DECEMBER\020}\022\014\n\007LITERAL\020\211\001"
      "\022\n\n\005GROUP\020\220\001\022\010\n\003SUM\020\221\001\022\010\n\003AVG\020\222\001\022\010\n\003MIN\020"
      "\223\001\022\010\n\003MAX\020\224\001\022\n\n\005SPLIT\020\225\001\022\014\n\007UNGROUP\020\226\001\022\013"
      "\n\006RANDOM\020\227\001\022\014\n\007CHANGES\020\230\001\022\t\n\004ARGS\020\232\001\022\013\n\006"
      "BINARY\020\233\001\022\014\n\007GEOJSON\020\235\001\022\017\n\nTO_GEOJSON\020\236\001"
      "\022\n\n\005POINT\020\237\001\022\t\n\004LINE\020\240\001\022\014\n\007POLYGON\020\241\001\022\r\n"
      "\010DISTANCE\020\242\001\022\017\n\nINTERSECTS\020\243\001\022\r\n\010INCLUDE"
      "S\020\244\001\022\013\n\006CIRCLE\020\245\001\022\025\n\020GET_INTERSECTING\020\246\001"
      "\022\t\n\004FILL\020\247\001\022\020\n\013GET_NEAREST\020\250\001\022\020\n\013POLYGON"
      "_SUB\020\253\001\022\013\n\006MINVAL\020\264\001\022\013\n\006MAXVAL\020\265\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4113);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rdb_protocol/ql2.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_rdb_5fprotocol_2fql2_2eproto

const ::google::protobuf::EnumDescriptor* VersionDummy_Version_descriptor() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_enum_descriptors[0];
}
bool VersionDummy_Version_IsValid(int value) {
  switch (value) {
    case 885177795:
    case 1063369270:
    case 1074539808:
    case 1601562686:
    case 1915781601:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VersionDummy_Version VersionDummy::V0_1;
const VersionDummy_Version VersionDummy::V0_2;
const VersionDummy_Version VersionDummy::V0_3;
const VersionDummy_Version VersionDummy::V0_4;
const VersionDummy_Version VersionDummy::V1_0;
const VersionDummy_Version VersionDummy::Version_MIN;
const VersionDummy_Version VersionDummy::Version_MAX;
const int VersionDummy::Version_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VersionDummy_Protocol_descriptor() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_enum_descriptors[1];
}
bool VersionDummy_Protocol_IsValid(int value) {
  switch (value) {
    case 656407617:
    case 2120839367:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VersionDummy_Protocol VersionDummy::PROTOBUF;
const VersionDummy_Protocol VersionDummy::JSON;
const VersionDummy_Protocol VersionDummy::Protocol_MIN;
const VersionDummy_Protocol VersionDummy::Protocol_MAX;
const int VersionDummy::Protocol_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Query_QueryType_descriptor() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_enum_descriptors[2];
}
bool Query_QueryType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Query_QueryType Query::START;
const Query_QueryType Query::CONTINUE;
const Query_QueryType Query::STOP;
const Query_QueryType Query::NOREPLY_WAIT;
const Query_QueryType Query::SERVER_INFO;
const Query_QueryType Query::QueryType_MIN;
const Query_QueryType Query::QueryType_MAX;
const int Query::QueryType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Frame_FrameType_descriptor() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_enum_descriptors[3];
}
bool Frame_FrameType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Frame_FrameType Frame::POS;
const Frame_FrameType Frame::OPT;
const Frame_FrameType Frame::FrameType_MIN;
const Frame_FrameType Frame::FrameType_MAX;
const int Frame::FrameType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Response_ResponseType_descriptor() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_enum_descriptors[4];
}
bool Response_ResponseType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Response_ResponseType Response::SUCCESS_ATOM;
const Response_ResponseType Response::SUCCESS_SEQUENCE;
const Response_ResponseType Response::SUCCESS_PARTIAL;
const Response_ResponseType Response::WAIT_COMPLETE;
const Response_ResponseType Response::SERVER_INFO;
const Response_ResponseType Response::CLIENT_ERROR;
const Response_ResponseType Response::COMPILE_ERROR;
const Response_ResponseType Response::RUNTIME_ERROR;
const Response_ResponseType Response::ResponseType_MIN;
const Response_ResponseType Response::ResponseType_MAX;
const int Response::ResponseType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Response_ErrorType_descriptor() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_enum_descriptors[5];
}
bool Response_ErrorType_IsValid(int value) {
  switch (value) {
    case 1000000:
    case 2000000:
    case 3000000:
    case 3100000:
    case 4100000:
    case 4200000:
    case 5000000:
    case 6000000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Response_ErrorType Response::INTERNAL;
const Response_ErrorType Response::RESOURCE_LIMIT;
const Response_ErrorType Response::QUERY_LOGIC;
const Response_ErrorType Response::NON_EXISTENCE;
const Response_ErrorType Response::OP_FAILED;
const Response_ErrorType Response::OP_INDETERMINATE;
const Response_ErrorType Response::USER;
const Response_ErrorType Response::PERMISSION_ERROR;
const Response_ErrorType Response::ErrorType_MIN;
const Response_ErrorType Response::ErrorType_MAX;
const int Response::ErrorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Response_ResponseNote_descriptor() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_enum_descriptors[6];
}
bool Response_ResponseNote_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Response_ResponseNote Response::SEQUENCE_FEED;
const Response_ResponseNote Response::ATOM_FEED;
const Response_ResponseNote Response::ORDER_BY_LIMIT_FEED;
const Response_ResponseNote Response::UNIONED_FEED;
const Response_ResponseNote Response::INCLUDES_STATES;
const Response_ResponseNote Response::ResponseNote_MIN;
const Response_ResponseNote Response::ResponseNote_MAX;
const int Response::ResponseNote_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Datum_DatumType_descriptor() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_enum_descriptors[7];
}
bool Datum_DatumType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Datum_DatumType Datum::R_NULL;
const Datum_DatumType Datum::R_BOOL;
const Datum_DatumType Datum::R_NUM;
const Datum_DatumType Datum::R_STR;
const Datum_DatumType Datum::R_ARRAY;
const Datum_DatumType Datum::R_OBJECT;
const Datum_DatumType Datum::R_JSON;
const Datum_DatumType Datum::DatumType_MIN;
const Datum_DatumType Datum::DatumType_MAX;
const int Datum::DatumType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Term_TermType_descriptor() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_enum_descriptors[8];
}
bool Term_TermType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 10:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Term_TermType Term::DATUM;
const Term_TermType Term::MAKE_ARRAY;
const Term_TermType Term::MAKE_OBJ;
const Term_TermType Term::VAR;
const Term_TermType Term::UUID;
const Term_TermType Term::ERROR;
const Term_TermType Term::IMPLICIT_VAR;
const Term_TermType Term::DB;
const Term_TermType Term::TABLE;
const Term_TermType Term::GET;
const Term_TermType Term::GET_ALL;
const Term_TermType Term::EQ;
const Term_TermType Term::NE;
const Term_TermType Term::LT;
const Term_TermType Term::LE;
const Term_TermType Term::GT;
const Term_TermType Term::GE;
const Term_TermType Term::NOT;
const Term_TermType Term::ADD;
const Term_TermType Term::SUB;
const Term_TermType Term::MUL;
const Term_TermType Term::DIV;
const Term_TermType Term::MOD;
const Term_TermType Term::FLOOR;
const Term_TermType Term::CEIL;
const Term_TermType Term::ROUND;
const Term_TermType Term::APPEND;
const Term_TermType Term::PREPEND;
const Term_TermType Term::DIFFERENCE;
const Term_TermType Term::SET_INSERT;
const Term_TermType Term::SET_INTERSECTION;
const Term_TermType Term::SET_UNION;
const Term_TermType Term::SET_DIFFERENCE;
const Term_TermType Term::SLICE;
const Term_TermType Term::SKIP;
const Term_TermType Term::LIMIT;
const Term_TermType Term::OFFSETS_OF;
const Term_TermType Term::CONTAINS;
const Term_TermType Term::GET_FIELD;
const Term_TermType Term::KEYS;
const Term_TermType Term::VALUES;
const Term_TermType Term::OBJECT;
const Term_TermType Term::HAS_FIELDS;
const Term_TermType Term::WITH_FIELDS;
const Term_TermType Term::PLUCK;
const Term_TermType Term::WITHOUT;
const Term_TermType Term::MERGE;
const Term_TermType Term::BETWEEN_DEPRECATED;
const Term_TermType Term::BETWEEN;
const Term_TermType Term::REDUCE;
const Term_TermType Term::MAP;
const Term_TermType Term::FOLD;
const Term_TermType Term::FILTER;
const Term_TermType Term::CONCAT_MAP;
const Term_TermType Term::ORDER_BY;
const Term_TermType Term::DISTINCT;
const Term_TermType Term::COUNT;
const Term_TermType Term::IS_EMPTY;
const Term_TermType Term::UNION;
const Term_TermType Term::NTH;
const Term_TermType Term::BRACKET;
const Term_TermType Term::INNER_JOIN;
const Term_TermType Term::OUTER_JOIN;
const Term_TermType Term::EQ_JOIN;
const Term_TermType Term::ZIP;
const Term_TermType Term::RANGE;
const Term_TermType Term::INSERT_AT;
const Term_TermType Term::DELETE_AT;
const Term_TermType Term::CHANGE_AT;
const Term_TermType Term::SPLICE_AT;
const Term_TermType Term::COERCE_TO;
const Term_TermType Term::TYPE_OF;
const Term_TermType Term::UPDATE;
const Term_TermType Term::DELETE;
const Term_TermType Term::REPLACE;
const Term_TermType Term::INSERT;
const Term_TermType Term::DB_CREATE;
const Term_TermType Term::DB_DROP;
const Term_TermType Term::DB_LIST;
const Term_TermType Term::TABLE_CREATE;
const Term_TermType Term::TABLE_DROP;
const Term_TermType Term::TABLE_LIST;
const Term_TermType Term::CONFIG;
const Term_TermType Term::STATUS;
const Term_TermType Term::WAIT;
const Term_TermType Term::RECONFIGURE;
const Term_TermType Term::REBALANCE;
const Term_TermType Term::SYNC;
const Term_TermType Term::GRANT;
const Term_TermType Term::INDEX_CREATE;
const Term_TermType Term::INDEX_DROP;
const Term_TermType Term::INDEX_LIST;
const Term_TermType Term::INDEX_STATUS;
const Term_TermType Term::INDEX_WAIT;
const Term_TermType Term::INDEX_RENAME;
const Term_TermType Term::SET_WRITE_HOOK;
const Term_TermType Term::GET_WRITE_HOOK;
const Term_TermType Term::FUNCALL;
const Term_TermType Term::BRANCH;
const Term_TermType Term::OR;
const Term_TermType Term::AND;
const Term_TermType Term::FOR_EACH;
const Term_TermType Term::FUNC;
const Term_TermType Term::ASC;
const Term_TermType Term::DESC;
const Term_TermType Term::INFO;
const Term_TermType Term::MATCH;
const Term_TermType Term::UPCASE;
const Term_TermType Term::DOWNCASE;
const Term_TermType Term::SAMPLE;
const Term_TermType Term::DEFAULT;
const Term_TermType Term::JSON;
const Term_TermType Term::TO_JSON_STRING;
const Term_TermType Term::ISO8601;
const Term_TermType Term::TO_ISO8601;
const Term_TermType Term::EPOCH_TIME;
const Term_TermType Term::TO_EPOCH_TIME;
const Term_TermType Term::NOW;
const Term_TermType Term::IN_TIMEZONE;
const Term_TermType Term::DURING;
const Term_TermType Term::DATE;
const Term_TermType Term::TIME_OF_DAY;
const Term_TermType Term::TIMEZONE;
const Term_TermType Term::YEAR;
const Term_TermType Term::MONTH;
const Term_TermType Term::DAY;
const Term_TermType Term::DAY_OF_WEEK;
const Term_TermType Term::DAY_OF_YEAR;
const Term_TermType Term::HOURS;
const Term_TermType Term::MINUTES;
const Term_TermType Term::SECONDS;
const Term_TermType Term::TIME;
const Term_TermType Term::MONDAY;
const Term_TermType Term::TUESDAY;
const Term_TermType Term::WEDNESDAY;
const Term_TermType Term::THURSDAY;
const Term_TermType Term::FRIDAY;
const Term_TermType Term::SATURDAY;
const Term_TermType Term::SUNDAY;
const Term_TermType Term::JANUARY;
const Term_TermType Term::FEBRUARY;
const Term_TermType Term::MARCH;
const Term_TermType Term::APRIL;
const Term_TermType Term::MAY;
const Term_TermType Term::JUNE;
const Term_TermType Term::JULY;
const Term_TermType Term::AUGUST;
const Term_TermType Term::SEPTEMBER;
const Term_TermType Term::OCTOBER;
const Term_TermType Term::NOVEMBER;
const Term_TermType Term::DECEMBER;
const Term_TermType Term::LITERAL;
const Term_TermType Term::GROUP;
const Term_TermType Term::SUM;
const Term_TermType Term::AVG;
const Term_TermType Term::MIN;
const Term_TermType Term::MAX;
const Term_TermType Term::SPLIT;
const Term_TermType Term::UNGROUP;
const Term_TermType Term::RANDOM;
const Term_TermType Term::CHANGES;
const Term_TermType Term::ARGS;
const Term_TermType Term::BINARY;
const Term_TermType Term::GEOJSON;
const Term_TermType Term::TO_GEOJSON;
const Term_TermType Term::POINT;
const Term_TermType Term::LINE;
const Term_TermType Term::POLYGON;
const Term_TermType Term::DISTANCE;
const Term_TermType Term::INTERSECTS;
const Term_TermType Term::INCLUDES;
const Term_TermType Term::CIRCLE;
const Term_TermType Term::GET_INTERSECTING;
const Term_TermType Term::FILL;
const Term_TermType Term::GET_NEAREST;
const Term_TermType Term::POLYGON_SUB;
const Term_TermType Term::MINVAL;
const Term_TermType Term::MAXVAL;
const Term_TermType Term::TermType_MIN;
const Term_TermType Term::TermType_MAX;
const int Term::TermType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VersionDummy::VersionDummy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rdb_5fprotocol_2fql2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:VersionDummy)
}
VersionDummy::VersionDummy(const VersionDummy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:VersionDummy)
}

void VersionDummy::SharedCtor() {
  _cached_size_ = 0;
}

VersionDummy::~VersionDummy() {
  // @@protoc_insertion_point(destructor:VersionDummy)
  SharedDtor();
}

void VersionDummy::SharedDtor() {
}

void VersionDummy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VersionDummy::descriptor() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VersionDummy& VersionDummy::default_instance() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::InitDefaults();
  return *internal_default_instance();
}

VersionDummy* VersionDummy::New(::google::protobuf::Arena* arena) const {
  VersionDummy* n = new VersionDummy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VersionDummy::Clear() {
// @@protoc_insertion_point(message_clear_start:VersionDummy)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VersionDummy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VersionDummy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:VersionDummy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VersionDummy)
  return false;
#undef DO_
}

void VersionDummy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VersionDummy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VersionDummy)
}

::google::protobuf::uint8* VersionDummy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VersionDummy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VersionDummy)
  return target;
}

size_t VersionDummy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VersionDummy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VersionDummy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VersionDummy)
  GOOGLE_DCHECK_NE(&from, this);
  const VersionDummy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VersionDummy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VersionDummy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VersionDummy)
    MergeFrom(*source);
  }
}

void VersionDummy::MergeFrom(const VersionDummy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VersionDummy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void VersionDummy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VersionDummy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionDummy::CopyFrom(const VersionDummy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VersionDummy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionDummy::IsInitialized() const {
  return true;
}

void VersionDummy::Swap(VersionDummy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VersionDummy::InternalSwap(VersionDummy* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VersionDummy::GetMetadata() const {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VersionDummy

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Query_AssocPair::kKeyFieldNumber;
const int Query_AssocPair::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Query_AssocPair::Query_AssocPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rdb_5fprotocol_2fql2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Query.AssocPair)
}
Query_AssocPair::Query_AssocPair(const Query_AssocPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_val()) {
    val_ = new ::Term(*from.val_);
  } else {
    val_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Query.AssocPair)
}

void Query_AssocPair::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_ = NULL;
}

Query_AssocPair::~Query_AssocPair() {
  // @@protoc_insertion_point(destructor:Query.AssocPair)
  SharedDtor();
}

void Query_AssocPair::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete val_;
  }
}

void Query_AssocPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Query_AssocPair::descriptor() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Query_AssocPair& Query_AssocPair::default_instance() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::InitDefaults();
  return *internal_default_instance();
}

Query_AssocPair* Query_AssocPair::New(::google::protobuf::Arena* arena) const {
  Query_AssocPair* n = new Query_AssocPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Query_AssocPair::Clear() {
// @@protoc_insertion_point(message_clear_start:Query.AssocPair)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (has_val()) {
      GOOGLE_DCHECK(val_ != NULL);
      val_->::Term::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Query_AssocPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Query.AssocPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Query.AssocPair.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Term val = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_val()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Query.AssocPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Query.AssocPair)
  return false;
#undef DO_
}

void Query_AssocPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Query.AssocPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Query.AssocPair.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional .Term val = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->val_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Query.AssocPair)
}

::google::protobuf::uint8* Query_AssocPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Query.AssocPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Query.AssocPair.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional .Term val = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->val_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Query.AssocPair)
  return target;
}

size_t Query_AssocPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Query.AssocPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional .Term val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->val_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Query_AssocPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Query.AssocPair)
  GOOGLE_DCHECK_NE(&from, this);
  const Query_AssocPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Query_AssocPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Query.AssocPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Query.AssocPair)
    MergeFrom(*source);
  }
}

void Query_AssocPair::MergeFrom(const Query_AssocPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Query.AssocPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_val()->::Term::MergeFrom(from.val());
    }
  }
}

void Query_AssocPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Query.AssocPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Query_AssocPair::CopyFrom(const Query_AssocPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Query.AssocPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query_AssocPair::IsInitialized() const {
  return true;
}

void Query_AssocPair::Swap(Query_AssocPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Query_AssocPair::InternalSwap(Query_AssocPair* other) {
  key_.Swap(&other->key_);
  std::swap(val_, other->val_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Query_AssocPair::GetMetadata() const {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Query_AssocPair

// optional string key = 1;
bool Query_AssocPair::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Query_AssocPair::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Query_AssocPair::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Query_AssocPair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& Query_AssocPair::key() const {
  // @@protoc_insertion_point(field_get:Query.AssocPair.key)
  return key_.GetNoArena();
}
void Query_AssocPair::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Query.AssocPair.key)
}
#if LANG_CXX11
void Query_AssocPair::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Query.AssocPair.key)
}
#endif
void Query_AssocPair::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Query.AssocPair.key)
}
void Query_AssocPair::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Query.AssocPair.key)
}
::std::string* Query_AssocPair::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:Query.AssocPair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Query_AssocPair::release_key() {
  // @@protoc_insertion_point(field_release:Query.AssocPair.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Query_AssocPair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:Query.AssocPair.key)
}

// optional .Term val = 2;
bool Query_AssocPair::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Query_AssocPair::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
void Query_AssocPair::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
void Query_AssocPair::clear_val() {
  if (val_ != NULL) val_->::Term::Clear();
  clear_has_val();
}
const ::Term& Query_AssocPair::val() const {
  // @@protoc_insertion_point(field_get:Query.AssocPair.val)
  return val_ != NULL ? *val_
                         : *::Term::internal_default_instance();
}
::Term* Query_AssocPair::mutable_val() {
  set_has_val();
  if (val_ == NULL) {
    val_ = new ::Term;
  }
  // @@protoc_insertion_point(field_mutable:Query.AssocPair.val)
  return val_;
}
::Term* Query_AssocPair::release_val() {
  // @@protoc_insertion_point(field_release:Query.AssocPair.val)
  clear_has_val();
  ::Term* temp = val_;
  val_ = NULL;
  return temp;
}
void Query_AssocPair::set_allocated_val(::Term* val) {
  delete val_;
  val_ = val;
  if (val) {
    set_has_val();
  } else {
    clear_has_val();
  }
  // @@protoc_insertion_point(field_set_allocated:Query.AssocPair.val)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Query::kTypeFieldNumber;
const int Query::kQueryFieldNumber;
const int Query::kTokenFieldNumber;
const int Query::kOBSOLETENoreplyFieldNumber;
const int Query::kAcceptsRJsonFieldNumber;
const int Query::kGlobalOptargsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Query::Query()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rdb_5fprotocol_2fql2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Query)
}
Query::Query(const Query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      global_optargs_(from.global_optargs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_query()) {
    query_ = new ::Term(*from.query_);
  } else {
    query_ = NULL;
  }
  ::memcpy(&token_, &from.token_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&token_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Query)
}

void Query::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&query_, 0, reinterpret_cast<char*>(&accepts_r_json_) -
    reinterpret_cast<char*>(&query_) + sizeof(accepts_r_json_));
  type_ = 1;
}

Query::~Query() {
  // @@protoc_insertion_point(destructor:Query)
  SharedDtor();
}

void Query::SharedDtor() {
  if (this != internal_default_instance()) {
    delete query_;
  }
}

void Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Query::descriptor() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Query& Query::default_instance() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::InitDefaults();
  return *internal_default_instance();
}

Query* Query::New(::google::protobuf::Arena* arena) const {
  Query* n = new Query;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Query::Clear() {
// @@protoc_insertion_point(message_clear_start:Query)
  global_optargs_.Clear();
  if (has_query()) {
    GOOGLE_DCHECK(query_ != NULL);
    query_->::Term::Clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&token_, 0, reinterpret_cast<char*>(&accepts_r_json_) -
      reinterpret_cast<char*>(&token_) + sizeof(accepts_r_json_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Query)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Query.QueryType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Query_QueryType_IsValid(value)) {
            set_type(static_cast< ::Query_QueryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Term query = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool OBSOLETE_noreply = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_obsolete_noreply();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obsolete_noreply_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool accepts_r_json = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_accepts_r_json();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accepts_r_json_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Query.AssocPair global_optargs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_global_optargs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Query)
  return false;
#undef DO_
}

void Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Query.QueryType type = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .Term query = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->query_, output);
  }

  // optional int64 token = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->token(), output);
  }

  // optional bool OBSOLETE_noreply = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->obsolete_noreply(), output);
  }

  // optional bool accepts_r_json = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->accepts_r_json(), output);
  }

  // repeated .Query.AssocPair global_optargs = 6;
  for (unsigned int i = 0, n = this->global_optargs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->global_optargs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Query)
}

::google::protobuf::uint8* Query::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Query.QueryType type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .Term query = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->query_, deterministic, target);
  }

  // optional int64 token = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->token(), target);
  }

  // optional bool OBSOLETE_noreply = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->obsolete_noreply(), target);
  }

  // optional bool accepts_r_json = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->accepts_r_json(), target);
  }

  // repeated .Query.AssocPair global_optargs = 6;
  for (unsigned int i = 0, n = this->global_optargs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->global_optargs(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Query)
  return target;
}

size_t Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Query)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .Query.AssocPair global_optargs = 6;
  {
    unsigned int count = this->global_optargs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->global_optargs(i));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .Term query = 2;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->query_);
    }

    // optional int64 token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->token());
    }

    // optional bool OBSOLETE_noreply = 4 [default = false];
    if (has_obsolete_noreply()) {
      total_size += 1 + 1;
    }

    // optional bool accepts_r_json = 5 [default = false];
    if (has_accepts_r_json()) {
      total_size += 1 + 1;
    }

    // optional .Query.QueryType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Query)
  GOOGLE_DCHECK_NE(&from, this);
  const Query* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Query>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Query)
    MergeFrom(*source);
  }
}

void Query::MergeFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  global_optargs_.MergeFrom(from.global_optargs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_query()->::Term::MergeFrom(from.query());
    }
    if (cached_has_bits & 0x00000002u) {
      token_ = from.token_;
    }
    if (cached_has_bits & 0x00000004u) {
      obsolete_noreply_ = from.obsolete_noreply_;
    }
    if (cached_has_bits & 0x00000008u) {
      accepts_r_json_ = from.accepts_r_json_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Query::CopyFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query::IsInitialized() const {
  return true;
}

void Query::Swap(Query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Query::InternalSwap(Query* other) {
  global_optargs_.InternalSwap(&other->global_optargs_);
  std::swap(query_, other->query_);
  std::swap(token_, other->token_);
  std::swap(obsolete_noreply_, other->obsolete_noreply_);
  std::swap(accepts_r_json_, other->accepts_r_json_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Query::GetMetadata() const {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Query

// optional .Query.QueryType type = 1;
bool Query::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Query::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void Query::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void Query::clear_type() {
  type_ = 1;
  clear_has_type();
}
::Query_QueryType Query::type() const {
  // @@protoc_insertion_point(field_get:Query.type)
  return static_cast< ::Query_QueryType >(type_);
}
void Query::set_type(::Query_QueryType value) {
  assert(::Query_QueryType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Query.type)
}

// optional .Term query = 2;
bool Query::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Query::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
void Query::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
void Query::clear_query() {
  if (query_ != NULL) query_->::Term::Clear();
  clear_has_query();
}
const ::Term& Query::query() const {
  // @@protoc_insertion_point(field_get:Query.query)
  return query_ != NULL ? *query_
                         : *::Term::internal_default_instance();
}
::Term* Query::mutable_query() {
  set_has_query();
  if (query_ == NULL) {
    query_ = new ::Term;
  }
  // @@protoc_insertion_point(field_mutable:Query.query)
  return query_;
}
::Term* Query::release_query() {
  // @@protoc_insertion_point(field_release:Query.query)
  clear_has_query();
  ::Term* temp = query_;
  query_ = NULL;
  return temp;
}
void Query::set_allocated_query(::Term* query) {
  delete query_;
  query_ = query;
  if (query) {
    set_has_query();
  } else {
    clear_has_query();
  }
  // @@protoc_insertion_point(field_set_allocated:Query.query)
}

// optional int64 token = 3;
bool Query::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Query::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
void Query::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void Query::clear_token() {
  token_ = GOOGLE_LONGLONG(0);
  clear_has_token();
}
::google::protobuf::int64 Query::token() const {
  // @@protoc_insertion_point(field_get:Query.token)
  return token_;
}
void Query::set_token(::google::protobuf::int64 value) {
  set_has_token();
  token_ = value;
  // @@protoc_insertion_point(field_set:Query.token)
}

// optional bool OBSOLETE_noreply = 4 [default = false];
bool Query::has_obsolete_noreply() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Query::set_has_obsolete_noreply() {
  _has_bits_[0] |= 0x00000004u;
}
void Query::clear_has_obsolete_noreply() {
  _has_bits_[0] &= ~0x00000004u;
}
void Query::clear_obsolete_noreply() {
  obsolete_noreply_ = false;
  clear_has_obsolete_noreply();
}
bool Query::obsolete_noreply() const {
  // @@protoc_insertion_point(field_get:Query.OBSOLETE_noreply)
  return obsolete_noreply_;
}
void Query::set_obsolete_noreply(bool value) {
  set_has_obsolete_noreply();
  obsolete_noreply_ = value;
  // @@protoc_insertion_point(field_set:Query.OBSOLETE_noreply)
}

// optional bool accepts_r_json = 5 [default = false];
bool Query::has_accepts_r_json() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Query::set_has_accepts_r_json() {
  _has_bits_[0] |= 0x00000008u;
}
void Query::clear_has_accepts_r_json() {
  _has_bits_[0] &= ~0x00000008u;
}
void Query::clear_accepts_r_json() {
  accepts_r_json_ = false;
  clear_has_accepts_r_json();
}
bool Query::accepts_r_json() const {
  // @@protoc_insertion_point(field_get:Query.accepts_r_json)
  return accepts_r_json_;
}
void Query::set_accepts_r_json(bool value) {
  set_has_accepts_r_json();
  accepts_r_json_ = value;
  // @@protoc_insertion_point(field_set:Query.accepts_r_json)
}

// repeated .Query.AssocPair global_optargs = 6;
int Query::global_optargs_size() const {
  return global_optargs_.size();
}
void Query::clear_global_optargs() {
  global_optargs_.Clear();
}
const ::Query_AssocPair& Query::global_optargs(int index) const {
  // @@protoc_insertion_point(field_get:Query.global_optargs)
  return global_optargs_.Get(index);
}
::Query_AssocPair* Query::mutable_global_optargs(int index) {
  // @@protoc_insertion_point(field_mutable:Query.global_optargs)
  return global_optargs_.Mutable(index);
}
::Query_AssocPair* Query::add_global_optargs() {
  // @@protoc_insertion_point(field_add:Query.global_optargs)
  return global_optargs_.Add();
}
::google::protobuf::RepeatedPtrField< ::Query_AssocPair >*
Query::mutable_global_optargs() {
  // @@protoc_insertion_point(field_mutable_list:Query.global_optargs)
  return &global_optargs_;
}
const ::google::protobuf::RepeatedPtrField< ::Query_AssocPair >&
Query::global_optargs() const {
  // @@protoc_insertion_point(field_list:Query.global_optargs)
  return global_optargs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Frame::kTypeFieldNumber;
const int Frame::kPosFieldNumber;
const int Frame::kOptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Frame::Frame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rdb_5fprotocol_2fql2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Frame)
}
Frame::Frame(const Frame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  opt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_opt()) {
    opt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opt_);
  }
  ::memcpy(&pos_, &from.pos_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&pos_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Frame)
}

void Frame::SharedCtor() {
  _cached_size_ = 0;
  opt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_ = GOOGLE_LONGLONG(0);
  type_ = 1;
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  opt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Frame::descriptor() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Frame& Frame::default_instance() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::InitDefaults();
  return *internal_default_instance();
}

Frame* Frame::New(::google::protobuf::Arena* arena) const {
  Frame* n = new Frame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:Frame)
  if (has_opt()) {
    GOOGLE_DCHECK(!opt_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*opt_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    pos_ = GOOGLE_LONGLONG(0);
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Frame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Frame.FrameType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Frame_FrameType_IsValid(value)) {
            set_type(static_cast< ::Frame_FrameType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string opt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->opt().data(), this->opt().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Frame.opt");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Frame)
  return false;
#undef DO_
}

void Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Frame.FrameType type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int64 pos = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->pos(), output);
  }

  // optional string opt = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->opt().data(), this->opt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Frame.opt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->opt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Frame)
}

::google::protobuf::uint8* Frame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Frame.FrameType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int64 pos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->pos(), target);
  }

  // optional string opt = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->opt().data(), this->opt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Frame.opt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->opt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Frame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string opt = 3;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opt());
    }

    // optional int64 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pos());
    }

    // optional .Frame.FrameType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Frame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Frame)
  GOOGLE_DCHECK_NE(&from, this);
  const Frame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Frame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Frame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Frame)
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_opt();
      opt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opt_);
    }
    if (cached_has_bits & 0x00000002u) {
      pos_ = from.pos_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Frame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::Swap(Frame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Frame::InternalSwap(Frame* other) {
  opt_.Swap(&other->opt_);
  std::swap(pos_, other->pos_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Frame::GetMetadata() const {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Frame

// optional .Frame.FrameType type = 1;
bool Frame::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Frame::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void Frame::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void Frame::clear_type() {
  type_ = 1;
  clear_has_type();
}
::Frame_FrameType Frame::type() const {
  // @@protoc_insertion_point(field_get:Frame.type)
  return static_cast< ::Frame_FrameType >(type_);
}
void Frame::set_type(::Frame_FrameType value) {
  assert(::Frame_FrameType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Frame.type)
}

// optional int64 pos = 2;
bool Frame::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Frame::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
void Frame::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
void Frame::clear_pos() {
  pos_ = GOOGLE_LONGLONG(0);
  clear_has_pos();
}
::google::protobuf::int64 Frame::pos() const {
  // @@protoc_insertion_point(field_get:Frame.pos)
  return pos_;
}
void Frame::set_pos(::google::protobuf::int64 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:Frame.pos)
}

// optional string opt = 3;
bool Frame::has_opt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Frame::set_has_opt() {
  _has_bits_[0] |= 0x00000001u;
}
void Frame::clear_has_opt() {
  _has_bits_[0] &= ~0x00000001u;
}
void Frame::clear_opt() {
  opt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_opt();
}
const ::std::string& Frame::opt() const {
  // @@protoc_insertion_point(field_get:Frame.opt)
  return opt_.GetNoArena();
}
void Frame::set_opt(const ::std::string& value) {
  set_has_opt();
  opt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Frame.opt)
}
#if LANG_CXX11
void Frame::set_opt(::std::string&& value) {
  set_has_opt();
  opt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Frame.opt)
}
#endif
void Frame::set_opt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_opt();
  opt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Frame.opt)
}
void Frame::set_opt(const char* value, size_t size) {
  set_has_opt();
  opt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Frame.opt)
}
::std::string* Frame::mutable_opt() {
  set_has_opt();
  // @@protoc_insertion_point(field_mutable:Frame.opt)
  return opt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Frame::release_opt() {
  // @@protoc_insertion_point(field_release:Frame.opt)
  clear_has_opt();
  return opt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Frame::set_allocated_opt(::std::string* opt) {
  if (opt != NULL) {
    set_has_opt();
  } else {
    clear_has_opt();
  }
  opt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opt);
  // @@protoc_insertion_point(field_set_allocated:Frame.opt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Backtrace::kFramesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Backtrace::Backtrace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rdb_5fprotocol_2fql2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Backtrace)
}
Backtrace::Backtrace(const Backtrace& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      frames_(from.frames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Backtrace)
}

void Backtrace::SharedCtor() {
  _cached_size_ = 0;
}

Backtrace::~Backtrace() {
  // @@protoc_insertion_point(destructor:Backtrace)
  SharedDtor();
}

void Backtrace::SharedDtor() {
}

void Backtrace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Backtrace::descriptor() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Backtrace& Backtrace::default_instance() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::InitDefaults();
  return *internal_default_instance();
}

Backtrace* Backtrace::New(::google::protobuf::Arena* arena) const {
  Backtrace* n = new Backtrace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Backtrace::Clear() {
// @@protoc_insertion_point(message_clear_start:Backtrace)
  frames_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Backtrace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Backtrace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Frame frames = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Backtrace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Backtrace)
  return false;
#undef DO_
}

void Backtrace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Backtrace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Frame frames = 1;
  for (unsigned int i = 0, n = this->frames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->frames(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Backtrace)
}

::google::protobuf::uint8* Backtrace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Backtrace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Frame frames = 1;
  for (unsigned int i = 0, n = this->frames_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->frames(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Backtrace)
  return target;
}

size_t Backtrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Backtrace)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .Frame frames = 1;
  {
    unsigned int count = this->frames_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frames(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Backtrace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Backtrace)
  GOOGLE_DCHECK_NE(&from, this);
  const Backtrace* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Backtrace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Backtrace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Backtrace)
    MergeFrom(*source);
  }
}

void Backtrace::MergeFrom(const Backtrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Backtrace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frames_.MergeFrom(from.frames_);
}

void Backtrace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Backtrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Backtrace::CopyFrom(const Backtrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Backtrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Backtrace::IsInitialized() const {
  return true;
}

void Backtrace::Swap(Backtrace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Backtrace::InternalSwap(Backtrace* other) {
  frames_.InternalSwap(&other->frames_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Backtrace::GetMetadata() const {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Backtrace

// repeated .Frame frames = 1;
int Backtrace::frames_size() const {
  return frames_.size();
}
void Backtrace::clear_frames() {
  frames_.Clear();
}
const ::Frame& Backtrace::frames(int index) const {
  // @@protoc_insertion_point(field_get:Backtrace.frames)
  return frames_.Get(index);
}
::Frame* Backtrace::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:Backtrace.frames)
  return frames_.Mutable(index);
}
::Frame* Backtrace::add_frames() {
  // @@protoc_insertion_point(field_add:Backtrace.frames)
  return frames_.Add();
}
::google::protobuf::RepeatedPtrField< ::Frame >*
Backtrace::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:Backtrace.frames)
  return &frames_;
}
const ::google::protobuf::RepeatedPtrField< ::Frame >&
Backtrace::frames() const {
  // @@protoc_insertion_point(field_list:Backtrace.frames)
  return frames_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kTypeFieldNumber;
const int Response::kErrorTypeFieldNumber;
const int Response::kNotesFieldNumber;
const int Response::kTokenFieldNumber;
const int Response::kResponseFieldNumber;
const int Response::kBacktraceFieldNumber;
const int Response::kProfileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rdb_5fprotocol_2fql2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Response)
}
Response::Response(const Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      response_(from.response_),
      notes_(from.notes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_backtrace()) {
    backtrace_ = new ::Backtrace(*from.backtrace_);
  } else {
    backtrace_ = NULL;
  }
  if (from.has_profile()) {
    profile_ = new ::Datum(*from.profile_);
  } else {
    profile_ = NULL;
  }
  ::memcpy(&token_, &from.token_,
    reinterpret_cast<char*>(&error_type_) -
    reinterpret_cast<char*>(&token_) + sizeof(error_type_));
  // @@protoc_insertion_point(copy_constructor:Response)
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&backtrace_, 0, reinterpret_cast<char*>(&token_) -
    reinterpret_cast<char*>(&backtrace_) + sizeof(token_));
  type_ = 1;
  error_type_ = 1000000;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != internal_default_instance()) {
    delete backtrace_;
  }
  if (this != internal_default_instance()) {
    delete profile_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Response& Response::default_instance() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::InitDefaults();
  return *internal_default_instance();
}

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Response)
  response_.Clear();
  notes_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_backtrace()) {
      GOOGLE_DCHECK(backtrace_ != NULL);
      backtrace_->::Backtrace::Clear();
    }
    if (has_profile()) {
      GOOGLE_DCHECK(profile_ != NULL);
      profile_->::Datum::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    token_ = GOOGLE_LONGLONG(0);
    type_ = 1;
    error_type_ = 1000000;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Response.ResponseType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Response_ResponseType_IsValid(value)) {
            set_type(static_cast< ::Response_ResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Datum response = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Backtrace backtrace = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backtrace()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Datum profile = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Response.ResponseNote notes = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Response_ResponseNote_IsValid(value)) {
            add_notes(static_cast< ::Response_ResponseNote >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 6,
                 ::Response_ResponseNote_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_notes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Response.ErrorType error_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Response_ErrorType_IsValid(value)) {
            set_error_type(static_cast< ::Response_ErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Response.ResponseType type = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int64 token = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->token(), output);
  }

  // repeated .Datum response = 3;
  for (unsigned int i = 0, n = this->response_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->response(i), output);
  }

  // optional .Backtrace backtrace = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->backtrace_, output);
  }

  // optional .Datum profile = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->profile_, output);
  }

  // repeated .Response.ResponseNote notes = 6;
  for (int i = 0, n = this->notes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->notes(i), output);
  }

  // optional .Response.ErrorType error_type = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->error_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Response.ResponseType type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int64 token = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->token(), target);
  }

  // repeated .Datum response = 3;
  for (unsigned int i = 0, n = this->response_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->response(i), deterministic, target);
  }

  // optional .Backtrace backtrace = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->backtrace_, deterministic, target);
  }

  // optional .Datum profile = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->profile_, deterministic, target);
  }

  // repeated .Response.ResponseNote notes = 6;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    6, this->notes_, target);

  // optional .Response.ErrorType error_type = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->error_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .Datum response = 3;
  {
    unsigned int count = this->response_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response(i));
    }
  }

  // repeated .Response.ResponseNote notes = 6;
  {
    size_t data_size = 0;
    unsigned int count = this->notes_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->notes(i));
    }
    total_size += (1UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .Backtrace backtrace = 4;
    if (has_backtrace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->backtrace_);
    }

    // optional .Datum profile = 5;
    if (has_profile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->profile_);
    }

    // optional int64 token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->token());
    }

    // optional .Response.ResponseType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Response.ErrorType error_type = 7;
    if (has_error_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  response_.MergeFrom(from.response_);
  notes_.MergeFrom(from.notes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_backtrace()->::Backtrace::MergeFrom(from.backtrace());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_profile()->::Datum::MergeFrom(from.profile());
    }
    if (cached_has_bits & 0x00000004u) {
      token_ = from.token_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      error_type_ = from.error_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  response_.InternalSwap(&other->response_);
  notes_.InternalSwap(&other->notes_);
  std::swap(backtrace_, other->backtrace_);
  std::swap(profile_, other->profile_);
  std::swap(token_, other->token_);
  std::swap(type_, other->type_);
  std::swap(error_type_, other->error_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional .Response.ResponseType type = 1;
bool Response::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Response::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void Response::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void Response::clear_type() {
  type_ = 1;
  clear_has_type();
}
::Response_ResponseType Response::type() const {
  // @@protoc_insertion_point(field_get:Response.type)
  return static_cast< ::Response_ResponseType >(type_);
}
void Response::set_type(::Response_ResponseType value) {
  assert(::Response_ResponseType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Response.type)
}

// optional .Response.ErrorType error_type = 7;
bool Response::has_error_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Response::set_has_error_type() {
  _has_bits_[0] |= 0x00000010u;
}
void Response::clear_has_error_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void Response::clear_error_type() {
  error_type_ = 1000000;
  clear_has_error_type();
}
::Response_ErrorType Response::error_type() const {
  // @@protoc_insertion_point(field_get:Response.error_type)
  return static_cast< ::Response_ErrorType >(error_type_);
}
void Response::set_error_type(::Response_ErrorType value) {
  assert(::Response_ErrorType_IsValid(value));
  set_has_error_type();
  error_type_ = value;
  // @@protoc_insertion_point(field_set:Response.error_type)
}

// repeated .Response.ResponseNote notes = 6;
int Response::notes_size() const {
  return notes_.size();
}
void Response::clear_notes() {
  notes_.Clear();
}
::Response_ResponseNote Response::notes(int index) const {
  // @@protoc_insertion_point(field_get:Response.notes)
  return static_cast< ::Response_ResponseNote >(notes_.Get(index));
}
void Response::set_notes(int index, ::Response_ResponseNote value) {
  assert(::Response_ResponseNote_IsValid(value));
  notes_.Set(index, value);
  // @@protoc_insertion_point(field_set:Response.notes)
}
void Response::add_notes(::Response_ResponseNote value) {
  assert(::Response_ResponseNote_IsValid(value));
  notes_.Add(value);
  // @@protoc_insertion_point(field_add:Response.notes)
}
const ::google::protobuf::RepeatedField<int>&
Response::notes() const {
  // @@protoc_insertion_point(field_list:Response.notes)
  return notes_;
}
::google::protobuf::RepeatedField<int>*
Response::mutable_notes() {
  // @@protoc_insertion_point(field_mutable_list:Response.notes)
  return &notes_;
}

// optional int64 token = 2;
bool Response::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Response::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
void Response::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
void Response::clear_token() {
  token_ = GOOGLE_LONGLONG(0);
  clear_has_token();
}
::google::protobuf::int64 Response::token() const {
  // @@protoc_insertion_point(field_get:Response.token)
  return token_;
}
void Response::set_token(::google::protobuf::int64 value) {
  set_has_token();
  token_ = value;
  // @@protoc_insertion_point(field_set:Response.token)
}

// repeated .Datum response = 3;
int Response::response_size() const {
  return response_.size();
}
void Response::clear_response() {
  response_.Clear();
}
const ::Datum& Response::response(int index) const {
  // @@protoc_insertion_point(field_get:Response.response)
  return response_.Get(index);
}
::Datum* Response::mutable_response(int index) {
  // @@protoc_insertion_point(field_mutable:Response.response)
  return response_.Mutable(index);
}
::Datum* Response::add_response() {
  // @@protoc_insertion_point(field_add:Response.response)
  return response_.Add();
}
::google::protobuf::RepeatedPtrField< ::Datum >*
Response::mutable_response() {
  // @@protoc_insertion_point(field_mutable_list:Response.response)
  return &response_;
}
const ::google::protobuf::RepeatedPtrField< ::Datum >&
Response::response() const {
  // @@protoc_insertion_point(field_list:Response.response)
  return response_;
}

// optional .Backtrace backtrace = 4;
bool Response::has_backtrace() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response::set_has_backtrace() {
  _has_bits_[0] |= 0x00000001u;
}
void Response::clear_has_backtrace() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response::clear_backtrace() {
  if (backtrace_ != NULL) backtrace_->::Backtrace::Clear();
  clear_has_backtrace();
}
const ::Backtrace& Response::backtrace() const {
  // @@protoc_insertion_point(field_get:Response.backtrace)
  return backtrace_ != NULL ? *backtrace_
                         : *::Backtrace::internal_default_instance();
}
::Backtrace* Response::mutable_backtrace() {
  set_has_backtrace();
  if (backtrace_ == NULL) {
    backtrace_ = new ::Backtrace;
  }
  // @@protoc_insertion_point(field_mutable:Response.backtrace)
  return backtrace_;
}
::Backtrace* Response::release_backtrace() {
  // @@protoc_insertion_point(field_release:Response.backtrace)
  clear_has_backtrace();
  ::Backtrace* temp = backtrace_;
  backtrace_ = NULL;
  return temp;
}
void Response::set_allocated_backtrace(::Backtrace* backtrace) {
  delete backtrace_;
  backtrace_ = backtrace;
  if (backtrace) {
    set_has_backtrace();
  } else {
    clear_has_backtrace();
  }
  // @@protoc_insertion_point(field_set_allocated:Response.backtrace)
}

// optional .Datum profile = 5;
bool Response::has_profile() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Response::set_has_profile() {
  _has_bits_[0] |= 0x00000002u;
}
void Response::clear_has_profile() {
  _has_bits_[0] &= ~0x00000002u;
}
void Response::clear_profile() {
  if (profile_ != NULL) profile_->::Datum::Clear();
  clear_has_profile();
}
const ::Datum& Response::profile() const {
  // @@protoc_insertion_point(field_get:Response.profile)
  return profile_ != NULL ? *profile_
                         : *::Datum::internal_default_instance();
}
::Datum* Response::mutable_profile() {
  set_has_profile();
  if (profile_ == NULL) {
    profile_ = new ::Datum;
  }
  // @@protoc_insertion_point(field_mutable:Response.profile)
  return profile_;
}
::Datum* Response::release_profile() {
  // @@protoc_insertion_point(field_release:Response.profile)
  clear_has_profile();
  ::Datum* temp = profile_;
  profile_ = NULL;
  return temp;
}
void Response::set_allocated_profile(::Datum* profile) {
  delete profile_;
  profile_ = profile;
  if (profile) {
    set_has_profile();
  } else {
    clear_has_profile();
  }
  // @@protoc_insertion_point(field_set_allocated:Response.profile)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Datum_AssocPair::kKeyFieldNumber;
const int Datum_AssocPair::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Datum_AssocPair::Datum_AssocPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rdb_5fprotocol_2fql2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Datum.AssocPair)
}
Datum_AssocPair::Datum_AssocPair(const Datum_AssocPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_val()) {
    val_ = new ::Datum(*from.val_);
  } else {
    val_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Datum.AssocPair)
}

void Datum_AssocPair::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_ = NULL;
}

Datum_AssocPair::~Datum_AssocPair() {
  // @@protoc_insertion_point(destructor:Datum.AssocPair)
  SharedDtor();
}

void Datum_AssocPair::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete val_;
  }
}

void Datum_AssocPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Datum_AssocPair::descriptor() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Datum_AssocPair& Datum_AssocPair::default_instance() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::InitDefaults();
  return *internal_default_instance();
}

Datum_AssocPair* Datum_AssocPair::New(::google::protobuf::Arena* arena) const {
  Datum_AssocPair* n = new Datum_AssocPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Datum_AssocPair::Clear() {
// @@protoc_insertion_point(message_clear_start:Datum.AssocPair)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (has_val()) {
      GOOGLE_DCHECK(val_ != NULL);
      val_->::Datum::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Datum_AssocPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Datum.AssocPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Datum.AssocPair.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Datum val = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_val()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Datum.AssocPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Datum.AssocPair)
  return false;
#undef DO_
}

void Datum_AssocPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Datum.AssocPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Datum.AssocPair.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional .Datum val = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->val_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Datum.AssocPair)
}

::google::protobuf::uint8* Datum_AssocPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Datum.AssocPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Datum.AssocPair.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional .Datum val = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->val_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Datum.AssocPair)
  return target;
}

size_t Datum_AssocPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Datum.AssocPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional .Datum val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->val_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Datum_AssocPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Datum.AssocPair)
  GOOGLE_DCHECK_NE(&from, this);
  const Datum_AssocPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Datum_AssocPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Datum.AssocPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Datum.AssocPair)
    MergeFrom(*source);
  }
}

void Datum_AssocPair::MergeFrom(const Datum_AssocPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Datum.AssocPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_val()->::Datum::MergeFrom(from.val());
    }
  }
}

void Datum_AssocPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Datum.AssocPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Datum_AssocPair::CopyFrom(const Datum_AssocPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Datum.AssocPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Datum_AssocPair::IsInitialized() const {
  return true;
}

void Datum_AssocPair::Swap(Datum_AssocPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Datum_AssocPair::InternalSwap(Datum_AssocPair* other) {
  key_.Swap(&other->key_);
  std::swap(val_, other->val_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Datum_AssocPair::GetMetadata() const {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Datum_AssocPair

// optional string key = 1;
bool Datum_AssocPair::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Datum_AssocPair::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Datum_AssocPair::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Datum_AssocPair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& Datum_AssocPair::key() const {
  // @@protoc_insertion_point(field_get:Datum.AssocPair.key)
  return key_.GetNoArena();
}
void Datum_AssocPair::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Datum.AssocPair.key)
}
#if LANG_CXX11
void Datum_AssocPair::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Datum.AssocPair.key)
}
#endif
void Datum_AssocPair::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Datum.AssocPair.key)
}
void Datum_AssocPair::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Datum.AssocPair.key)
}
::std::string* Datum_AssocPair::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:Datum.AssocPair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Datum_AssocPair::release_key() {
  // @@protoc_insertion_point(field_release:Datum.AssocPair.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Datum_AssocPair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:Datum.AssocPair.key)
}

// optional .Datum val = 2;
bool Datum_AssocPair::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Datum_AssocPair::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
void Datum_AssocPair::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
void Datum_AssocPair::clear_val() {
  if (val_ != NULL) val_->::Datum::Clear();
  clear_has_val();
}
const ::Datum& Datum_AssocPair::val() const {
  // @@protoc_insertion_point(field_get:Datum.AssocPair.val)
  return val_ != NULL ? *val_
                         : *::Datum::internal_default_instance();
}
::Datum* Datum_AssocPair::mutable_val() {
  set_has_val();
  if (val_ == NULL) {
    val_ = new ::Datum;
  }
  // @@protoc_insertion_point(field_mutable:Datum.AssocPair.val)
  return val_;
}
::Datum* Datum_AssocPair::release_val() {
  // @@protoc_insertion_point(field_release:Datum.AssocPair.val)
  clear_has_val();
  ::Datum* temp = val_;
  val_ = NULL;
  return temp;
}
void Datum_AssocPair::set_allocated_val(::Datum* val) {
  delete val_;
  val_ = val;
  if (val) {
    set_has_val();
  } else {
    clear_has_val();
  }
  // @@protoc_insertion_point(field_set_allocated:Datum.AssocPair.val)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Datum::kTypeFieldNumber;
const int Datum::kRBoolFieldNumber;
const int Datum::kRNumFieldNumber;
const int Datum::kRStrFieldNumber;
const int Datum::kRArrayFieldNumber;
const int Datum::kRObjectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Datum::Datum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rdb_5fprotocol_2fql2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Datum)
}
Datum::Datum(const Datum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      r_array_(from.r_array_),
      r_object_(from.r_object_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  r_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_r_str()) {
    r_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.r_str_);
  }
  ::memcpy(&r_num_, &from.r_num_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&r_num_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Datum)
}

void Datum::SharedCtor() {
  _cached_size_ = 0;
  r_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&r_num_, 0, reinterpret_cast<char*>(&r_bool_) -
    reinterpret_cast<char*>(&r_num_) + sizeof(r_bool_));
  type_ = 1;
}

Datum::~Datum() {
  // @@protoc_insertion_point(destructor:Datum)
  SharedDtor();
}

void Datum::SharedDtor() {
  r_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Datum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Datum::descriptor() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Datum& Datum::default_instance() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::InitDefaults();
  return *internal_default_instance();
}

Datum* Datum::New(::google::protobuf::Arena* arena) const {
  Datum* n = new Datum;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Datum::Clear() {
// @@protoc_insertion_point(message_clear_start:Datum)
  r_array_.Clear();
  r_object_.Clear();
  if (has_r_str()) {
    GOOGLE_DCHECK(!r_str_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*r_str_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&r_num_, 0, reinterpret_cast<char*>(&r_bool_) -
      reinterpret_cast<char*>(&r_num_) + sizeof(r_bool_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Datum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Datum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Datum.DatumType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Datum_DatumType_IsValid(value)) {
            set_type(static_cast< ::Datum_DatumType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool r_bool = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_r_bool();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &r_bool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double r_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_r_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &r_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string r_str = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_r_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->r_str().data(), this->r_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Datum.r_str");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Datum r_array = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_r_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Datum.AssocPair r_object = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_r_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Datum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Datum)
  return false;
#undef DO_
}

void Datum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Datum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Datum.DatumType type = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bool r_bool = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->r_bool(), output);
  }

  // optional double r_num = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->r_num(), output);
  }

  // optional string r_str = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->r_str().data(), this->r_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Datum.r_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->r_str(), output);
  }

  // repeated .Datum r_array = 5;
  for (unsigned int i = 0, n = this->r_array_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->r_array(i), output);
  }

  // repeated .Datum.AssocPair r_object = 6;
  for (unsigned int i = 0, n = this->r_object_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->r_object(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Datum)
}

::google::protobuf::uint8* Datum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Datum)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Datum.DatumType type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bool r_bool = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->r_bool(), target);
  }

  // optional double r_num = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->r_num(), target);
  }

  // optional string r_str = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->r_str().data(), this->r_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Datum.r_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->r_str(), target);
  }

  // repeated .Datum r_array = 5;
  for (unsigned int i = 0, n = this->r_array_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->r_array(i), deterministic, target);
  }

  // repeated .Datum.AssocPair r_object = 6;
  for (unsigned int i = 0, n = this->r_object_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->r_object(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Datum)
  return target;
}

size_t Datum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Datum)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .Datum r_array = 5;
  {
    unsigned int count = this->r_array_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->r_array(i));
    }
  }

  // repeated .Datum.AssocPair r_object = 6;
  {
    unsigned int count = this->r_object_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->r_object(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string r_str = 4;
    if (has_r_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->r_str());
    }

    // optional double r_num = 3;
    if (has_r_num()) {
      total_size += 1 + 8;
    }

    // optional bool r_bool = 2;
    if (has_r_bool()) {
      total_size += 1 + 1;
    }

    // optional .Datum.DatumType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Datum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Datum)
  GOOGLE_DCHECK_NE(&from, this);
  const Datum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Datum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Datum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Datum)
    MergeFrom(*source);
  }
}

void Datum::MergeFrom(const Datum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Datum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  r_array_.MergeFrom(from.r_array_);
  r_object_.MergeFrom(from.r_object_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_r_str();
      r_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.r_str_);
    }
    if (cached_has_bits & 0x00000002u) {
      r_num_ = from.r_num_;
    }
    if (cached_has_bits & 0x00000004u) {
      r_bool_ = from.r_bool_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Datum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Datum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Datum::CopyFrom(const Datum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Datum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Datum::IsInitialized() const {
  return true;
}

void Datum::Swap(Datum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Datum::InternalSwap(Datum* other) {
  r_array_.InternalSwap(&other->r_array_);
  r_object_.InternalSwap(&other->r_object_);
  r_str_.Swap(&other->r_str_);
  std::swap(r_num_, other->r_num_);
  std::swap(r_bool_, other->r_bool_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Datum::GetMetadata() const {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Datum

// optional .Datum.DatumType type = 1;
bool Datum::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Datum::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void Datum::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void Datum::clear_type() {
  type_ = 1;
  clear_has_type();
}
::Datum_DatumType Datum::type() const {
  // @@protoc_insertion_point(field_get:Datum.type)
  return static_cast< ::Datum_DatumType >(type_);
}
void Datum::set_type(::Datum_DatumType value) {
  assert(::Datum_DatumType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Datum.type)
}

// optional bool r_bool = 2;
bool Datum::has_r_bool() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Datum::set_has_r_bool() {
  _has_bits_[0] |= 0x00000004u;
}
void Datum::clear_has_r_bool() {
  _has_bits_[0] &= ~0x00000004u;
}
void Datum::clear_r_bool() {
  r_bool_ = false;
  clear_has_r_bool();
}
bool Datum::r_bool() const {
  // @@protoc_insertion_point(field_get:Datum.r_bool)
  return r_bool_;
}
void Datum::set_r_bool(bool value) {
  set_has_r_bool();
  r_bool_ = value;
  // @@protoc_insertion_point(field_set:Datum.r_bool)
}

// optional double r_num = 3;
bool Datum::has_r_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Datum::set_has_r_num() {
  _has_bits_[0] |= 0x00000002u;
}
void Datum::clear_has_r_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void Datum::clear_r_num() {
  r_num_ = 0;
  clear_has_r_num();
}
double Datum::r_num() const {
  // @@protoc_insertion_point(field_get:Datum.r_num)
  return r_num_;
}
void Datum::set_r_num(double value) {
  set_has_r_num();
  r_num_ = value;
  // @@protoc_insertion_point(field_set:Datum.r_num)
}

// optional string r_str = 4;
bool Datum::has_r_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Datum::set_has_r_str() {
  _has_bits_[0] |= 0x00000001u;
}
void Datum::clear_has_r_str() {
  _has_bits_[0] &= ~0x00000001u;
}
void Datum::clear_r_str() {
  r_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_r_str();
}
const ::std::string& Datum::r_str() const {
  // @@protoc_insertion_point(field_get:Datum.r_str)
  return r_str_.GetNoArena();
}
void Datum::set_r_str(const ::std::string& value) {
  set_has_r_str();
  r_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Datum.r_str)
}
#if LANG_CXX11
void Datum::set_r_str(::std::string&& value) {
  set_has_r_str();
  r_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Datum.r_str)
}
#endif
void Datum::set_r_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_r_str();
  r_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Datum.r_str)
}
void Datum::set_r_str(const char* value, size_t size) {
  set_has_r_str();
  r_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Datum.r_str)
}
::std::string* Datum::mutable_r_str() {
  set_has_r_str();
  // @@protoc_insertion_point(field_mutable:Datum.r_str)
  return r_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Datum::release_r_str() {
  // @@protoc_insertion_point(field_release:Datum.r_str)
  clear_has_r_str();
  return r_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Datum::set_allocated_r_str(::std::string* r_str) {
  if (r_str != NULL) {
    set_has_r_str();
  } else {
    clear_has_r_str();
  }
  r_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), r_str);
  // @@protoc_insertion_point(field_set_allocated:Datum.r_str)
}

// repeated .Datum r_array = 5;
int Datum::r_array_size() const {
  return r_array_.size();
}
void Datum::clear_r_array() {
  r_array_.Clear();
}
const ::Datum& Datum::r_array(int index) const {
  // @@protoc_insertion_point(field_get:Datum.r_array)
  return r_array_.Get(index);
}
::Datum* Datum::mutable_r_array(int index) {
  // @@protoc_insertion_point(field_mutable:Datum.r_array)
  return r_array_.Mutable(index);
}
::Datum* Datum::add_r_array() {
  // @@protoc_insertion_point(field_add:Datum.r_array)
  return r_array_.Add();
}
::google::protobuf::RepeatedPtrField< ::Datum >*
Datum::mutable_r_array() {
  // @@protoc_insertion_point(field_mutable_list:Datum.r_array)
  return &r_array_;
}
const ::google::protobuf::RepeatedPtrField< ::Datum >&
Datum::r_array() const {
  // @@protoc_insertion_point(field_list:Datum.r_array)
  return r_array_;
}

// repeated .Datum.AssocPair r_object = 6;
int Datum::r_object_size() const {
  return r_object_.size();
}
void Datum::clear_r_object() {
  r_object_.Clear();
}
const ::Datum_AssocPair& Datum::r_object(int index) const {
  // @@protoc_insertion_point(field_get:Datum.r_object)
  return r_object_.Get(index);
}
::Datum_AssocPair* Datum::mutable_r_object(int index) {
  // @@protoc_insertion_point(field_mutable:Datum.r_object)
  return r_object_.Mutable(index);
}
::Datum_AssocPair* Datum::add_r_object() {
  // @@protoc_insertion_point(field_add:Datum.r_object)
  return r_object_.Add();
}
::google::protobuf::RepeatedPtrField< ::Datum_AssocPair >*
Datum::mutable_r_object() {
  // @@protoc_insertion_point(field_mutable_list:Datum.r_object)
  return &r_object_;
}
const ::google::protobuf::RepeatedPtrField< ::Datum_AssocPair >&
Datum::r_object() const {
  // @@protoc_insertion_point(field_list:Datum.r_object)
  return r_object_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Term_AssocPair::kKeyFieldNumber;
const int Term_AssocPair::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Term_AssocPair::Term_AssocPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rdb_5fprotocol_2fql2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Term.AssocPair)
}
Term_AssocPair::Term_AssocPair(const Term_AssocPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_val()) {
    val_ = new ::Term(*from.val_);
  } else {
    val_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Term.AssocPair)
}

void Term_AssocPair::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_ = NULL;
}

Term_AssocPair::~Term_AssocPair() {
  // @@protoc_insertion_point(destructor:Term.AssocPair)
  SharedDtor();
}

void Term_AssocPair::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete val_;
  }
}

void Term_AssocPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Term_AssocPair::descriptor() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Term_AssocPair& Term_AssocPair::default_instance() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::InitDefaults();
  return *internal_default_instance();
}

Term_AssocPair* Term_AssocPair::New(::google::protobuf::Arena* arena) const {
  Term_AssocPair* n = new Term_AssocPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Term_AssocPair::Clear() {
// @@protoc_insertion_point(message_clear_start:Term.AssocPair)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (has_val()) {
      GOOGLE_DCHECK(val_ != NULL);
      val_->::Term::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Term_AssocPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Term.AssocPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Term.AssocPair.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Term val = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_val()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Term.AssocPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Term.AssocPair)
  return false;
#undef DO_
}

void Term_AssocPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Term.AssocPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Term.AssocPair.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional .Term val = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->val_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Term.AssocPair)
}

::google::protobuf::uint8* Term_AssocPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Term.AssocPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Term.AssocPair.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional .Term val = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->val_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Term.AssocPair)
  return target;
}

size_t Term_AssocPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Term.AssocPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional .Term val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->val_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Term_AssocPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Term.AssocPair)
  GOOGLE_DCHECK_NE(&from, this);
  const Term_AssocPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Term_AssocPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Term.AssocPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Term.AssocPair)
    MergeFrom(*source);
  }
}

void Term_AssocPair::MergeFrom(const Term_AssocPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Term.AssocPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_val()->::Term::MergeFrom(from.val());
    }
  }
}

void Term_AssocPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Term.AssocPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Term_AssocPair::CopyFrom(const Term_AssocPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Term.AssocPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Term_AssocPair::IsInitialized() const {
  return true;
}

void Term_AssocPair::Swap(Term_AssocPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Term_AssocPair::InternalSwap(Term_AssocPair* other) {
  key_.Swap(&other->key_);
  std::swap(val_, other->val_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Term_AssocPair::GetMetadata() const {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Term_AssocPair

// optional string key = 1;
bool Term_AssocPair::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Term_AssocPair::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Term_AssocPair::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Term_AssocPair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& Term_AssocPair::key() const {
  // @@protoc_insertion_point(field_get:Term.AssocPair.key)
  return key_.GetNoArena();
}
void Term_AssocPair::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Term.AssocPair.key)
}
#if LANG_CXX11
void Term_AssocPair::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Term.AssocPair.key)
}
#endif
void Term_AssocPair::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Term.AssocPair.key)
}
void Term_AssocPair::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Term.AssocPair.key)
}
::std::string* Term_AssocPair::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:Term.AssocPair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Term_AssocPair::release_key() {
  // @@protoc_insertion_point(field_release:Term.AssocPair.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Term_AssocPair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:Term.AssocPair.key)
}

// optional .Term val = 2;
bool Term_AssocPair::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Term_AssocPair::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
void Term_AssocPair::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
void Term_AssocPair::clear_val() {
  if (val_ != NULL) val_->::Term::Clear();
  clear_has_val();
}
const ::Term& Term_AssocPair::val() const {
  // @@protoc_insertion_point(field_get:Term.AssocPair.val)
  return val_ != NULL ? *val_
                         : *::Term::internal_default_instance();
}
::Term* Term_AssocPair::mutable_val() {
  set_has_val();
  if (val_ == NULL) {
    val_ = new ::Term;
  }
  // @@protoc_insertion_point(field_mutable:Term.AssocPair.val)
  return val_;
}
::Term* Term_AssocPair::release_val() {
  // @@protoc_insertion_point(field_release:Term.AssocPair.val)
  clear_has_val();
  ::Term* temp = val_;
  val_ = NULL;
  return temp;
}
void Term_AssocPair::set_allocated_val(::Term* val) {
  delete val_;
  val_ = val;
  if (val) {
    set_has_val();
  } else {
    clear_has_val();
  }
  // @@protoc_insertion_point(field_set_allocated:Term.AssocPair.val)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Term::kTypeFieldNumber;
const int Term::kDatumFieldNumber;
const int Term::kArgsFieldNumber;
const int Term::kOptargsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Term::Term()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rdb_5fprotocol_2fql2_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Term)
}
Term::Term(const Term& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      args_(from.args_),
      optargs_(from.optargs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_datum()) {
    datum_ = new ::Datum(*from.datum_);
  } else {
    datum_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Term)
}

void Term::SharedCtor() {
  _cached_size_ = 0;
  datum_ = NULL;
  type_ = 1;
}

Term::~Term() {
  // @@protoc_insertion_point(destructor:Term)
  SharedDtor();
}

void Term::SharedDtor() {
  if (this != internal_default_instance()) {
    delete datum_;
  }
}

void Term::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Term::descriptor() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Term& Term::default_instance() {
  protobuf_rdb_5fprotocol_2fql2_2eproto::InitDefaults();
  return *internal_default_instance();
}

Term* Term::New(::google::protobuf::Arena* arena) const {
  Term* n = new Term;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Term::Clear() {
// @@protoc_insertion_point(message_clear_start:Term)
  args_.Clear();
  optargs_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_datum()) {
      GOOGLE_DCHECK(datum_ != NULL);
      datum_->::Datum::Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Term::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Term)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Term.TermType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Term_TermType_IsValid(value)) {
            set_type(static_cast< ::Term_TermType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Datum datum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_datum()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Term args = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Term.AssocPair optargs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_optargs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Term)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Term)
  return false;
#undef DO_
}

void Term::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Term)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Term.TermType type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .Datum datum = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->datum_, output);
  }

  // repeated .Term args = 3;
  for (unsigned int i = 0, n = this->args_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->args(i), output);
  }

  // repeated .Term.AssocPair optargs = 4;
  for (unsigned int i = 0, n = this->optargs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->optargs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Term)
}

::google::protobuf::uint8* Term::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Term)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Term.TermType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .Datum datum = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->datum_, deterministic, target);
  }

  // repeated .Term args = 3;
  for (unsigned int i = 0, n = this->args_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->args(i), deterministic, target);
  }

  // repeated .Term.AssocPair optargs = 4;
  for (unsigned int i = 0, n = this->optargs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->optargs(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Term)
  return target;
}

size_t Term::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Term)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .Term args = 3;
  {
    unsigned int count = this->args_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->args(i));
    }
  }

  // repeated .Term.AssocPair optargs = 4;
  {
    unsigned int count = this->optargs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->optargs(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .Datum datum = 2;
    if (has_datum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->datum_);
    }

    // optional .Term.TermType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Term::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Term)
  GOOGLE_DCHECK_NE(&from, this);
  const Term* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Term>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Term)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Term)
    MergeFrom(*source);
  }
}

void Term::MergeFrom(const Term& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Term)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  optargs_.MergeFrom(from.optargs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_datum()->::Datum::MergeFrom(from.datum());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Term::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Term)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Term::CopyFrom(const Term& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Term)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Term::IsInitialized() const {
  return true;
}

void Term::Swap(Term* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Term::InternalSwap(Term* other) {
  args_.InternalSwap(&other->args_);
  optargs_.InternalSwap(&other->optargs_);
  std::swap(datum_, other->datum_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Term::GetMetadata() const {
  protobuf_rdb_5fprotocol_2fql2_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdb_5fprotocol_2fql2_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Term

// optional .Term.TermType type = 1;
bool Term::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Term::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Term::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Term::clear_type() {
  type_ = 1;
  clear_has_type();
}
::Term_TermType Term::type() const {
  // @@protoc_insertion_point(field_get:Term.type)
  return static_cast< ::Term_TermType >(type_);
}
void Term::set_type(::Term_TermType value) {
  assert(::Term_TermType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Term.type)
}

// optional .Datum datum = 2;
bool Term::has_datum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Term::set_has_datum() {
  _has_bits_[0] |= 0x00000001u;
}
void Term::clear_has_datum() {
  _has_bits_[0] &= ~0x00000001u;
}
void Term::clear_datum() {
  if (datum_ != NULL) datum_->::Datum::Clear();
  clear_has_datum();
}
const ::Datum& Term::datum() const {
  // @@protoc_insertion_point(field_get:Term.datum)
  return datum_ != NULL ? *datum_
                         : *::Datum::internal_default_instance();
}
::Datum* Term::mutable_datum() {
  set_has_datum();
  if (datum_ == NULL) {
    datum_ = new ::Datum;
  }
  // @@protoc_insertion_point(field_mutable:Term.datum)
  return datum_;
}
::Datum* Term::release_datum() {
  // @@protoc_insertion_point(field_release:Term.datum)
  clear_has_datum();
  ::Datum* temp = datum_;
  datum_ = NULL;
  return temp;
}
void Term::set_allocated_datum(::Datum* datum) {
  delete datum_;
  datum_ = datum;
  if (datum) {
    set_has_datum();
  } else {
    clear_has_datum();
  }
  // @@protoc_insertion_point(field_set_allocated:Term.datum)
}

// repeated .Term args = 3;
int Term::args_size() const {
  return args_.size();
}
void Term::clear_args() {
  args_.Clear();
}
const ::Term& Term::args(int index) const {
  // @@protoc_insertion_point(field_get:Term.args)
  return args_.Get(index);
}
::Term* Term::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:Term.args)
  return args_.Mutable(index);
}
::Term* Term::add_args() {
  // @@protoc_insertion_point(field_add:Term.args)
  return args_.Add();
}
::google::protobuf::RepeatedPtrField< ::Term >*
Term::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:Term.args)
  return &args_;
}
const ::google::protobuf::RepeatedPtrField< ::Term >&
Term::args() const {
  // @@protoc_insertion_point(field_list:Term.args)
  return args_;
}

// repeated .Term.AssocPair optargs = 4;
int Term::optargs_size() const {
  return optargs_.size();
}
void Term::clear_optargs() {
  optargs_.Clear();
}
const ::Term_AssocPair& Term::optargs(int index) const {
  // @@protoc_insertion_point(field_get:Term.optargs)
  return optargs_.Get(index);
}
::Term_AssocPair* Term::mutable_optargs(int index) {
  // @@protoc_insertion_point(field_mutable:Term.optargs)
  return optargs_.Mutable(index);
}
::Term_AssocPair* Term::add_optargs() {
  // @@protoc_insertion_point(field_add:Term.optargs)
  return optargs_.Add();
}
::google::protobuf::RepeatedPtrField< ::Term_AssocPair >*
Term::mutable_optargs() {
  // @@protoc_insertion_point(field_mutable_list:Term.optargs)
  return &optargs_;
}
const ::google::protobuf::RepeatedPtrField< ::Term_AssocPair >&
Term::optargs() const {
  // @@protoc_insertion_point(field_list:Term.optargs)
  return optargs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
